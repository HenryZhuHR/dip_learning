cmake_minimum_required(VERSION 3.0)
project( project )

# C-CXX-standard
set(CMAKE_C_COMPILER "gcc")
set(CMAKE_CXX_COMPILER "g++")
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS  "-g -fexec-charset=GBK")

# -------- Debug config --------
#dubug 模式------------------这个非常重要，否则无法进入断点
add_definitions("-Wall -g")
set (CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -g")
# SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g2 -ggdb")
# SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")


# -------- source code --------
# 添加.h include || include_directories() = -I
include_directories("${PROJECT_SOURCE_DIR}/include")
# 添加.cpp src || link_directories() = -L
# set(CMAKE_CXX_FLAGS "-static ${CMAKE_CXX_FLAGS}")   #优先添加静态链接库
add_subdirectory("${PROJECT_SOURCE_DIR}/src")

# link_directories("${PROJECT_SOURCE_DIR}/src")

# -------- 3rd-party lib --------
# -- Opencv4
# set(OpenCV_DIR "C:/Users/henryzhu/OneDrive/Programming/Cpp/CppLibrary/Opencv/mingw-build/install")
# find_package( OpenCV 4 REQUIRED )
# include_directories( ${OpenCV_INCLUDE_DIRS} )
# link_directories(${OpenCV_LIB_DIRS})
# message(STATUS "OpenCV status:")
# message(STATUS "    Opencv version: ${OpenCV_VERSION}")   
# message(STATUS "    Opencv include: ${OpenCV_INCLUDE_DIRS}")
# -- Boost
# set(BOOST_ROOT "C:/Users/henryzhu/OneDrive/Programming/Cpp/CppLibrary/Boost/boost_1_71_0")
# set(BOOST_INCLUDEDIR "D:/boost_1_62_0")
# set(BOOST_LIBRARYDIR "D:/boost_1_62_0/GCC/lib")
# # 找到boost特定版本，以及需要的子模块，1.46.1为最低版本，REQUIRED强调必须找到该模块，否则编译失败；
# # COMPONENTS后面罗列一组子模块（这些子模块都属于boost）
# find_package(Boost 1.46.1 REQUIRED COMPONENTS filesystem system)
# # include_directories("D:/boost_1_62_0")
# # link_libraries("D:/boost_1_62_0/GCC/lib/libboost_filesystem-mgw53-mt-1_62.a" "D:/boost_1_62_0/GCC/lib/libboost_system-mgw53-mt-1_62.a")
# # 验证是否发现boost
# if(Boost_FOUND)
#     message ("boost found")
# else()
#     message (FATAL_ERROR "[INFO] Cannot find Boost")
# endif()

option(WITH_LOG "Build with output logs and images in tmp" OFF)
if(WITH_LOG)
    add_definitions(-DLOG)
endif(WITH_LOG)


message("CMAKE_BINARY_DIR:" ${CMAKE_BINARY_DIR})


# 
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin) 
add_executable(${PROJECT_NAME} 
    app/main.cpp
    )
target_link_libraries(${PROJECT_NAME} )
    # src
    # ${OpenCV_LIBS}    
    # ${Boost_SYSTEM_LIBRARY}
    # ${Boost_FILESYSTEM_LIBRARY}
    # )

    